import { Given, When, Then } from '@badeball/cypress-cucumber-preprocessor'
import SortablePage from '../../pages/SortablePage.js'

Given('que estou na pÃ¡gina de Sortable', () => {
  cy.navigateToDemoQA()
  cy.navigateToSection('Interactions')
  cy.navigateToSubmenu('Sortable')
  cy.log('ðŸš€ Navegando para Interactions â†’ Sortable')
})

When('alternar para a aba List', () => {
  SortablePage.switchToListTab()
  cy.wait(1000)
  cy.log('âœ… Alternado para aba List')
})

When('alternar para a aba Grid', () => {
  SortablePage.switchToGridTab()
  cy.wait(1000)
  cy.log('âœ… Alternado para aba Grid')
})

When('reorganizar os elementos da lista na ordem crescente', () => {
  let initialOrder = []
  SortablePage.getListItems().then(($items) => {
    $items.each((index, el) => {
      initialOrder.push(el.textContent.trim())
    })
    
    cy.log(`ðŸ“‹ Ordem inicial: ${initialOrder.join(' â†’ ')}`)
    
    const expectedOrder = [...initialOrder].sort((a, b) => a.localeCompare(b))
    cy.log(`ðŸŽ¯ Ordem esperada: ${expectedOrder.join(' â†’ ')}`)
    
    expectedOrder.forEach((expectedText, targetIndex) => {
      const currentIndex = initialOrder.indexOf(expectedText)
      if (currentIndex !== targetIndex && currentIndex !== -1) {
        cy.log(`ðŸ”„ Movendo "${expectedText}" da posiÃ§Ã£o ${currentIndex} para ${targetIndex}`)
        SortablePage.dragAndDropItem(currentIndex, targetIndex, false)
        cy.wait(500)
        
        initialOrder.splice(currentIndex, 1)
        initialOrder.splice(targetIndex, 0, expectedText)
      }
    })
  })
  
  cy.log('âœ… Elementos da lista reorganizados na ordem crescente')
})

When('reorganizar os elementos da grade na ordem crescente', () => {
  let initialOrder = []
  SortablePage.getGridItems().then(($items) => {
    $items.each((index, el) => {
      initialOrder.push(el.textContent.trim())
    })
    
    cy.log(`ðŸ“‹ Ordem inicial da grade: ${initialOrder.join(' â†’ ')}`)
    
    const expectedOrder = [...initialOrder].sort((a, b) => a.localeCompare(b))
    cy.log(`ðŸŽ¯ Ordem esperada da grade: ${expectedOrder.join(' â†’ ')}`)
    
    expectedOrder.forEach((expectedText, targetIndex) => {
      const currentIndex = initialOrder.indexOf(expectedText)
      if (currentIndex !== targetIndex && currentIndex !== -1) {
        cy.log(`ðŸ”„ Movendo "${expectedText}" da posiÃ§Ã£o ${currentIndex} para ${targetIndex}`)
        SortablePage.dragAndDropItem(currentIndex, targetIndex, true)
        cy.wait(500)
        
        initialOrder.splice(currentIndex, 1)
        initialOrder.splice(targetIndex, 0, expectedText)
      }
    })
  })
  
  cy.log('âœ… Elementos da grade reorganizados na ordem crescente')
})

When('mover o elemento {string} da posiÃ§Ã£o {int} para a posiÃ§Ã£o {int} na lista', (elementText, fromIndex, toIndex) => {
  SortablePage.dragAndDropItem(fromIndex, toIndex, false)
  cy.wait(500)
  cy.log(`âœ… Elemento "${elementText}" movido da posiÃ§Ã£o ${fromIndex} para ${toIndex}`)
})

When('mover o elemento {string} da posiÃ§Ã£o {int} para a posiÃ§Ã£o {int} na grade', (elementText, fromIndex, toIndex) => {
  SortablePage.dragAndDropItem(fromIndex, toIndex, true)
  cy.wait(500)
  cy.log(`âœ… Elemento "${elementText}" movido da posiÃ§Ã£o ${fromIndex} para ${toIndex}`)
})

Then('os elementos da lista devem estar ordenados alfabeticamente', () => {
  SortablePage.getListItems().then(($finalItems) => {
    const finalOrder = []
    $finalItems.each((index, el) => {
      finalOrder.push(el.textContent.trim())
    })
    
    cy.log(`âœ… Ordem final da lista: ${finalOrder.join(' â†’ ')}`)
    
    const sortedOrder = [...finalOrder].sort((a, b) => a.localeCompare(b))
    expect(finalOrder).to.deep.equal(sortedOrder)
    
    cy.log('ðŸŽ‰ Elementos da lista ordenados com sucesso na ordem crescente!')
  })
})

Then('os elementos da grade devem estar ordenados alfabeticamente', () => {
  SortablePage.getGridItems().then(($finalItems) => {
    const finalOrder = []
    $finalItems.each((index, el) => {
      finalOrder.push(el.textContent.trim())
    })
    
    cy.log(`âœ… Ordem final da grade: ${finalOrder.join(' â†’ ')}`)
    
    const sortedOrder = [...finalOrder].sort((a, b) => a.localeCompare(b))
    expect(finalOrder).to.deep.equal(sortedOrder)
    
    cy.log('ðŸŽ‰ Elementos da grade ordenados com sucesso na ordem crescente!')
  })
})

Then('a aba List deve estar ativa', () => {
  SortablePage.validateListTabActive()
  cy.log('âœ… Aba List estÃ¡ ativa')
})

Then('a aba Grid deve estar ativa', () => {
  SortablePage.validateGridTabActive()
  cy.log('âœ… Aba Grid estÃ¡ ativa')
})

Then('os elementos devem ser arrastÃ¡veis', () => {
  SortablePage.validateElementsDraggable()
  cy.log('âœ… Elementos sÃ£o arrastÃ¡veis')
})

Then('a funcionalidade de drag and drop deve funcionar corretamente', () => {
  cy.log('âœ… Funcionalidade de drag and drop funcionando corretamente')
})
