import { Given, When, Then } from '@badeball/cypress-cucumber-preprocessor'

let userId = ''
let token = ''
let books = []

Given('que estou na API BookStore', () => {
  cy.log('üöÄ Iniciando testes da API BookStore')
})

When('criar um novo usu√°rio com username {string} e password {string}', (username, password) => {
  cy.request({
    method: 'POST',
    url: 'https://demoqa.com/Account/v1/User',
    body: {
      userName: username,
      password: password
    },
    failOnStatusCode: false
  }).then((response) => {
    if (response.status === 201) {
      userId = response.body.userID
      cy.log(`‚úÖ Usu√°rio criado com sucesso. ID: ${userId}`)
      expect(response.status).to.eq(201)
    } else {
      cy.log(`‚ö†Ô∏è Usu√°rio j√° existe ou erro na cria√ß√£o: ${response.status}`)
      cy.request({
        method: 'POST',
        url: 'https://demoqa.com/Account/v1/GenerateToken',
        body: {
          userName: username,
          password: password
        }
      }).then((tokenResponse) => {
        if (tokenResponse.status === 200) {
          cy.request({
            method: 'POST',
            url: 'https://demoqa.com/Account/v1/Authorized',
            body: {
              userName: username,
              password: password
            }
          }).then((authResponse) => {
            if (authResponse.status === 200) {
              cy.request({
                method: 'GET',
                url: `https://demoqa.com/Account/v1/User/${username}`,
                failOnStatusCode: false
              }).then((userResponse) => {
                if (userResponse.status === 200) {
                  userId = userResponse.body.userId
                  cy.log(`‚úÖ Usu√°rio existente encontrado. ID: ${userId}`)
                }
              })
            }
          })
        }
      })
    }
  })
})

When('gerar token de autentica√ß√£o para o usu√°rio {string} com password {string}', (username, password) => {
  cy.request({
    method: 'POST',
    url: 'https://demoqa.com/Account/v1/GenerateToken',
    body: {
      userName: username,
      password: password
    }
  }).then((response) => {
    expect(response.status).to.eq(200)
    token = response.body.token
    cy.log(`‚úÖ Token gerado com sucesso: ${token.substring(0, 20)}...`)
  })
})

When('autorizar o usu√°rio {string} com password {string}', (username, password) => {
  cy.request({
    method: 'POST',
    url: 'https://demoqa.com/Account/v1/Authorized',
    body: {
      userName: username,
      password: password
    }
  }).then((response) => {
    expect(response.status).to.eq(200)
    expect(response.body).to.be.true
    cy.log('‚úÖ Usu√°rio autorizado com sucesso')
  })
})

When('listar todos os livros dispon√≠veis', () => {
  cy.request({
    method: 'GET',
    url: 'https://demoqa.com/BookStore/v1/Books'
  }).then((response) => {
    expect(response.status).to.eq(200)
    books = response.body.books
    cy.log(`üìö ${books.length} livros encontrados na biblioteca`)
  })
})

When('reservar o livro {string} para o usu√°rio', (isbn) => {
  const bookToAdd = books.find(book => book.isbn === isbn)
  if (bookToAdd) {
    cy.request({
      method: 'POST',
      url: 'https://demoqa.com/BookStore/v1/Books',
      headers: {
        'Authorization': `Bearer ${token}`
      },
      body: {
        userId: userId,
        collectionOfIsbns: [
          {
            isbn: isbn
          }
        ]
      }
    }).then((response) => {
      expect(response.status).to.eq(201)
      cy.log(`‚úÖ Livro "${bookToAdd.title}" reservado com sucesso`)
    })
  } else {
    cy.log(`‚ùå Livro com ISBN ${isbn} n√£o encontrado`)
  }
})

When('consultar informa√ß√µes do usu√°rio {string}', (username) => {
  cy.request({
    method: 'GET',
    url: `https://demoqa.com/Account/v1/User/${userId}`,
    headers: {
      'Authorization': `Bearer ${token}`
    }
  }).then((response) => {
    expect(response.status).to.eq(200)
    expect(response.body.userId).to.eq(userId)
    expect(response.body.username).to.eq(username)
    cy.log(`‚úÖ Informa√ß√µes do usu√°rio ${username} consultadas com sucesso`)
  })
})

When('tentar reservar livro sem autoriza√ß√£o', () => {
  cy.request({
    method: 'POST',
    url: 'https://demoqa.com/BookStore/v1/Books',
    body: {
      userId: 'invalid-user-id',
      collectionOfIsbns: [
        {
          isbn: '9781449325862'
        }
      ]
    },
    failOnStatusCode: false
  }).then((response) => {
    expect(response.status).to.eq(401)
    cy.log('‚úÖ Tentativa de reserva sem autoriza√ß√£o rejeitada corretamente')
  })
})

Then('o usu√°rio deve estar registrado no sistema', () => {
  expect(userId).to.not.be.empty
  cy.log(`‚úÖ Usu√°rio registrado com ID: ${userId}`)
})

Then('o token deve ser v√°lido', () => {
  expect(token).to.not.be.empty
  cy.log('‚úÖ Token v√°lido gerado')
})

Then('o usu√°rio deve estar autorizado', () => {
  cy.log('‚úÖ Usu√°rio autorizado com sucesso')
})

Then('os livros devem estar dispon√≠veis para reserva', () => {
  expect(books).to.be.an('array')
  expect(books.length).to.be.greaterThan(0)
  cy.log(`‚úÖ ${books.length} livros dispon√≠veis para reserva`)
})

Then('o livro deve ser reservado com sucesso', () => {
  cy.log('‚úÖ Livro reservado com sucesso')
})

Then('as informa√ß√µes do usu√°rio devem ser retornadas', () => {
  cy.log('‚úÖ Informa√ß√µes do usu√°rio retornadas corretamente')
})

Then('a opera√ß√£o deve ser rejeitada por falta de autoriza√ß√£o', () => {
  cy.log('‚úÖ Opera√ß√£o rejeitada por falta de autoriza√ß√£o - comportamento correto')
})
